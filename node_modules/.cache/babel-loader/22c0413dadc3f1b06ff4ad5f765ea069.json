{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport reducers from './ducks';\nimport sagas from './sagas';\nimport { __DEV__ } from '../utils'; // Persistor\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['Auth'] // only navigation will be persisted\n\n};\nconst middlewares = []; // Saga\n\nconst sagaMonitor = __DEV__ ? console.tron.createSagaMonitor() : null;\nconst sagaMiddleware = createSagaMiddleware({\n  sagaMonitor\n});\nmiddlewares.push(sagaMiddleware);\nconst composer = __DEV__ ? compose(applyMiddleware(...middlewares), console.tron.createEnhancer()) : compose(applyMiddleware(...middlewares));\nconst persistedReducer = persistReducer(persistConfig, reducers);\nconst store = createStore(persistedReducer, composer);\nconst persistor = persistStore(store);\nsagaMiddleware.run(sagas);\nexport { store, persistor };","map":{"version":3,"sources":["/Users/hygordias/dev/xapps/carl-zeiss/front_adm/src/store/index.js"],"names":["createStore","compose","applyMiddleware","createSagaMiddleware","persistStore","persistReducer","storage","reducers","sagas","__DEV__","persistConfig","key","whitelist","middlewares","sagaMonitor","console","tron","createSagaMonitor","sagaMiddleware","push","composer","createEnhancer","persistedReducer","store","persistor","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,SAASC,OAAT,QAAwB,UAAxB,C,CAEA;;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBL,EAAAA,OAFoB;AAGpBM,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHS,CAGA;;AAHA,CAAtB;AAMA,MAAMC,WAAW,GAAG,EAApB,C,CAEA;;AAEA,MAAMC,WAAW,GAAGL,OAAO,GAAGM,OAAO,CAACC,IAAR,CAAaC,iBAAb,EAAH,GAAsC,IAAjE;AAEA,MAAMC,cAAc,GAAGf,oBAAoB,CAAC;AAAEW,EAAAA;AAAF,CAAD,CAA3C;AAEAD,WAAW,CAACM,IAAZ,CAAiBD,cAAjB;AAEA,MAAME,QAAQ,GAAGX,OAAO,GAClBR,OAAO,CACLC,eAAe,CAAC,GAAGW,WAAJ,CADV,EAELE,OAAO,CAACC,IAAR,CAAaK,cAAb,EAFK,CADW,GAKlBpB,OAAO,CAACC,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CALb;AAOA,MAAMS,gBAAgB,GAAGjB,cAAc,CAACK,aAAD,EAAgBH,QAAhB,CAAvC;AAEA,MAAMgB,KAAK,GAAGvB,WAAW,CAACsB,gBAAD,EAAmBF,QAAnB,CAAzB;AACA,MAAMI,SAAS,GAAGpB,YAAY,CAACmB,KAAD,CAA9B;AAEAL,cAAc,CAACO,GAAf,CAAmBjB,KAAnB;AAEA,SAASe,KAAT,EAAgBC,SAAhB","sourcesContent":["import { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport reducers from './ducks';\nimport sagas from './sagas';\n\nimport { __DEV__ } from '../utils';\n\n// Persistor\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['Auth'] // only navigation will be persisted\n};\n\nconst middlewares = [];\n\n// Saga\n\nconst sagaMonitor = __DEV__ ? console.tron.createSagaMonitor() : null;\n\nconst sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n\nmiddlewares.push(sagaMiddleware);\n\nconst composer = __DEV__\n    ? compose(\n        applyMiddleware(...middlewares),\n        console.tron.createEnhancer(),\n    )\n    : compose(applyMiddleware(...middlewares));\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nconst store = createStore(persistedReducer, composer);\nconst persistor = persistStore(store);\n\nsagaMiddleware.run(sagas);\n\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}